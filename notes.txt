To start a new app:
1- npm init;
2- npm install --save express;
3- npm install --save nodemon;
4- In the package.json file :
    ...
    "scripts": {
        ...
        "start": "nodemon app.js"
    }
5- Create app.js;
6- Setup nodejs server inside app.js;
7- npm install --save body-parser;
8- Create a "routes" folder;
9- Create the file for router for example in here feed.js;
10- Create "controllers" folder;
11- Import controller in route file;
12- Register route in the app.js;

*CORS errors:
    -CORS stand for Cross-Origin Resource Sharing;
    -If client and server is on a same server that is Ok like localhost:3000 but
        if they are on different servers like client on localhost:3000 and server
        on localhost:4000 you will get CORS error.

13- Codes added to remove CORS errors :
    app.use((req, res, next) => {
        res.setHeader("Access-Control-Allow-Origin","*");
        //**For allowing our desired methods*/
        res.setHeader("Access-Control-Allow-Methods","GET, POST, PUT, PATCH, DELETE");
        //**For authorizing*/
        res.setHeader("Access-Control-Allow-Headers","Content-type, Authorized");
        next();
    })
14- npm install --save express-validator
15- npm install --save mongoose
16- npm install --save multer
17- For windows : npm install --save uuid
18- npm install --save bcryptjs

* JWT means : JSON data + signature = JSON Web Token
    The signature can only be verified by server, so you can't edit or create it.

*json()--> only works for texts

19- npm install --save jsonwebtoken

*To send token from front-end there is some methods :
    1-Send it via query parameter, EX: "http://.....?token=ysdkjad;kfasdf;ashdf;shfdsdfsjg"
    2-BEST SOLUTION: Use token as header, EX:
        fetch("http://....", {
                headers: {
                        Authorization: "Bearer" + token
                    }
                }
           );
     *The condition of using Authorization in the header is to mention it in the :
        app.js , res.setHeader("Access-Control-Allow-Headers","Content-type, Authorized");
                                                                             ----------
                                                            The Authorized is added in here
    *Bearer--> is a convention to identify type of token, typically it is used for jwt, it is
        not a must but is a convention.

//---------------------------------------------------------------------------------------//
SOCKET IO:
*Socket io is based on websocket. websocket is a protocol like http by which we can
    push data to the client from server.
1- npm install --save socket.io
2- add it in the app.listen() in app.js;
* In the React app we should install socket.io-client package too:
    npm install --save socket.to-client. Then :
        import openSocket from "socket.io-client"

//----------------------------------------------------------------------------------------//
DEPLOYING THE APP:
1- Create env for the app;
2- change scripts :
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
            "start": "node app.js",
            "start-server": "node app.js",
            "start:dev" : "nodemon app.js"
          }
3-We can set environmental variables in the package.json in "scripts" like:
         "scripts": {
                    "test": "echo \"Error: no test specified\" && exit 1",
                    "start": "MONGO_USER=ehsanScript MONGO_PASSWORD=E55268199Yk PORT=8080 node app.js",
                    "start-server": "node app.js",
                    "start:dev" : "nodemon app.js"
                  }
4- Use "helmet" package for secure our headers.
5- npm install --save helmet;
6- You can use it simply as a middleware : app.use(helmet());
//**Most servers use compression, and we don't have to use this middleware*/
7- We should use node compression for compressing our assets, for that install this package:
    npm install --save compression
8- In the app.js import compression and add it like middleware.
9- For logging requests use this package:
    npm install --save morgan;
10- Use it in the app.js file.
11- Another logging option is using console.log(), read this blog https://blog.risingstack.com/node-js-logging-tutorial/.


